#!/bin/bash
# This script invokes kepler

declare workflowFailedTxt="WORKFLOW.FAILED.txt"

#
# Delete workflow failed file that is created by submitter to handle
# case where job fails to even start cs-244
#
if [ -e "$workflowFailedTxt" ] ; then
  /bin/rm -f "$workflowFailedTxt"
fi


writeWorkflowFailedFile(){
  echo -e "simple.error.message=${1}\\ndetailed.error.message=${2}\\n" > $workflowFailedTxt
}

#
# function called when USR2 signal is caught
#
on_usr2() {
 echo "Caught USR2 signal killing children processes"
 for Y in `ps -o pid,cmd --ppid $$ | grep "java" | grep -v "grep" | sed "s/^ //" | sed "s/ .*//"` ; do
    echo "Killing $Y"
    kill $Y
 done
 echo "endtime: $endTime" >> $jobLogFile 2>&1
 echo "exitcode: 100"  >> $jobLogFile 2>&1
 if [ -s "$workflowFailedTxt" ] ; then
   echo -n " Job received USR2 signal which in SGE meant it is about to be killed" >> $workflowFailedTxt
 else
   echo -e "simple.error.message=Job killed by scheduler\\ndetailed.error.message=Job received USR2 signal which is the signal to exit\\n" > $workflowFailedTxt
 fi
 exit 100
}

trap 'on_usr2' USR2


declare jobLogFile="../job.${JOB_ID}.${SGE_TASK_ID}.log"
touch $jobLogFile > /dev/null 2>&1

if [ $? != 0 ] ; then
  jobLogFile="/dev/null"
fi

declare startTime=`date +%s 2>&1`

echo "sgejobid: $JOB_ID" >> $jobLogFile 2>&1
echo "sgejobname: $JOB_NAME" >> $jobLogFile 2>&1
echo "sgetaskid: $SGE_TASK_ID" >> $jobLogFile 2>&1
echo "starttime: $startTime" >> $jobLogFile 2>&1
echo "Arguments: @@JOB_ARGS@@" >> $jobLogFile 2>&1

export PATH="${PATH}:/usr/java/latest/bin:/usr/java/default/bin"

# 
EMAIL_ADDR="@@NOTIFY_EMAIL@@"

if [ "$EMAIL_ADDR" != "" ] ; then
  
  BCC_EMAIL="@@BCC_EMAIL@@"
  BCC_EMAIL_FLAG=""

  echo -n "Sending start email for @@JOB_NAME@@ to user $EMAIL_ADDR"
  if [ "$BCC_EMAIL" != "" ] ; then
    echo " and bcc to $BCC_EMAIL"
    BCC_EMAIL_FLAG="-b $BCC_EMAIL"
  else
    echo ""
  fi

  OUTEMAIL="Dear @@USER@@,\\n\\n"
  OUTEMAIL="${OUTEMAIL}Your @@WORKFLOW_NAME@@ workflow job: @@JOB_NAME@@ "
  OUTEMAIL="${OUTEMAIL}(@@JOB_ID@@) is now actively running on @@PROJECT@@ resources.\\n"
  OUTEMAIL="${OUTEMAIL}Please login to the @@PORTAL_NAME@@ "
  OUTEMAIL="${OUTEMAIL}(@@PORTAL_URL@@) to check status.\\n\\n"
  OUTEMAIL="${OUTEMAIL}Contact @@PROJECT@@ support at @@HELP_EMAIL@@ if you "
  OUTEMAIL="${OUTEMAIL}have any questions regarding your job.\\n\\n"
  OUTEMAIL="${OUTEMAIL}Sincerely,\\n\\n"
  OUTEMAIL="${OUTEMAIL}The @@PROJECT@@ Team\\n"
  OUTEMAIL="${OUTEMAIL}@@HELP_EMAIL@@\\n"

  echo -e "${OUTEMAIL}" | /bin/mail -s "@@PROJECT@@ Workflow @@WORKFLOW_NAME@@ - @@JOB_NAME@@ has started running" -r "@@HELP_EMAIL@@" $BCC_EMAIL_FLAG $EMAIL_ADDR
fi

# TODO:  Need to switch from wait to a polling loop so script
#        can check for updates to workflow.status file

@@KEPLER_SH@@ @@JOB_ARGS@@ &

wait $!

declare jobExitCode=$?

#
# If stderr file has size greater then 0 check
# for possible failures cs-244
#
if [ ! -e "$workflowFailedTxt" ] ; then
  if [ -s "stderr" ] ; then

    # Check for Exception in thread "main" Java returned: 1
    grep "Exception in thread \"main\" Java returned: 1" stderr
    if [ $? == 0 ] ; then
 
      # check for sql error
      declare possibleError=`grep "SQLException" stdout | sed "s/^.*SQLException: //" | sed "s/:.*//" | head -n 1`

      writeWorkflowFailedFile "Error running Kepler" "Found Exception in thread main Java returned: 1 in the stderr file for Kepler : $possibleError"

    fi
  fi
fi

if [ "$jobExitCode" == "0" ] ; then
  if [ -s "$workflowFailedTxt" ] ; then
    jobExitCode="101"
  fi
fi

declare endTime=`date +%s 2>&1`

echo "endtime: $endTime" >> $jobLogFile 2>&1
echo "exitcode: $jobExitCode"  >> $jobLogFile 2>&1

# 
# Updates the WorkspaceFile Path and whether the workspace file failed
#

declare workspaceStatusFlag="--workspacefilefailed false"

if [ -s "$workflowFailedTxt" ] ; then
  workspaceStatusFlag="--workspacefilefailed true"
fi

@@JAVA@@ @@UPDATE_WORKSPACE_PATH@@


#if the email address was set earlier send the completed workflow message
if [ "$EMAIL_ADDR" != "" ] ; then
  echo -n "Sending done email for @@JOB_NAME@@ to user $EMAIL_ADDR"
  if [ "$BCC_EMAIL" != "" ] ; then
    echo " and bcc to $BCC_EMAIL"
  else
    echo ""
  fi

  declare finishedMessage="finished"

  OUTEMAIL="Dear @@USER@@,\\n\\n"
  OUTEMAIL="${OUTEMAIL}Your @@WORKFLOW_NAME@@ job: @@JOB_NAME@@ (@@JOB_ID@@) "

  if [ -s "$workflowFailedTxt" ] ; then
    declare simpleError=`egrep "^simple.error.message=" $workflowFailedTxt | sed "s/^.*=//" | sed "s/\"/ /g"`
    declare detailedError=`egrep "^simple.error.message=" $workflowFailedTxt | sed "s/^.*=//" | sed "s/\"/ /g"`
    finishedMessage="failed"
    OUTEMAIL="${OUTEMAIL}has failed.\\n  Error from ${workflowFailedTxt}: $simpleError\\n\\n$detailedError\\n"
  else 
    OUTEMAIL="${OUTEMAIL}has finished running.\\n"
  fi

  OUTEMAIL="${OUTEMAIL}Please login to the @@PORTAL_NAME@@\\n"
  OUTEMAIL="${OUTEMAIL}(@@PORTAL_URL@@) to check completion status.\\n\\n"
  OUTEMAIL="${OUTEMAIL}Contact @@PROJECT@@ support at @@HELP_EMAIL@@ if you have any questions\\n"
  OUTEMAIL="${OUTEMAIL}regarding your job.\\n\\n"
  OUTEMAIL="${OUTEMAIL}Sincerely,\\n\\n"
  OUTEMAIL="${OUTEMAIL}The @@PROJECT@@ Team\\n"
  OUTEMAIL="${OUTEMAIL}@@HELP_EMAIL@@\\n"

  echo -e "${OUTEMAIL}" | /bin/mail -s "@@PROJECT@@ Workflow @@WORKFLOW_NAME@@ - @@JOB_NAME@@ has $finishedMessage" -r "@@HELP_EMAIL@@" $BCC_EMAIL_FLAG $EMAIL_ADDR
  sleep 10
fi



exit $jobExitCode

