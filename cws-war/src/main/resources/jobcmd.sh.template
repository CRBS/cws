#!/bin/bash
# This script invokes kepler

declare workflowFailedTxt="WORKFLOW.FAILED.txt"

#
# Delete workflow failed file that is created by submitter to handle
# case where job fails to even start cs-244
#
if [ -e "$workflowFailedTxt" ] ; then
  @@RM@@ -f "$workflowFailedTxt"
fi


writeWorkflowFailedFile(){
  @@ECHO@@ -e "simple.error.message=${1}\\ndetailed.error.message=${2}\\n" > $workflowFailedTxt
}

#
# function called when USR2 signal is caught
#
on_usr2() {
 @@ECHO@@ "Caught USR2 signal killing children processes"
 for Y in `ps -o pid,cmd --ppid $$ | grep "java" | grep -v "grep" | sed "s/^ //" | sed "s/ .*//"` ; do
    @@ECHO@@ "Killing $Y"
    @@KILL@@ $Y
 done
 @@ECHO@@ "endtime: $endTime" >> $jobLogFile 2>&1
 @@ECHO@@ "exitcode: 100"  >> $jobLogFile 2>&1
 if [ -s "$workflowFailedTxt" ] ; then
   @@ECHO@@ -n " Job received USR2 signal which in SGE meant it is about to be killed" >> $workflowFailedTxt
 else
   @@ECHO@@ -e "simple.error.message=Job killed by scheduler\\ndetailed.error.message=Job received USR2 signal which is the signal to exit\\n" > $workflowFailedTxt
 fi
 exit 100
}

trap 'on_usr2' USR2


declare jobLogFile="../job.${JOB_ID}.${SGE_TASK_ID}.log"
touch $jobLogFile > /dev/null 2>&1

if [ $? != 0 ] ; then
  jobLogFile="/dev/null"
fi

declare startTime=`date +%s 2>&1`

@@ECHO@@ "sgejobid: $JOB_ID" >> $jobLogFile 2>&1
@@ECHO@@ "sgejobname: $JOB_NAME" >> $jobLogFile 2>&1
@@ECHO@@ "sgetaskid: $SGE_TASK_ID" >> $jobLogFile 2>&1
@@ECHO@@ "starttime: $startTime" >> $jobLogFile 2>&1
@@ECHO@@ "Arguments: @@JOB_ARGS@@" >> $jobLogFile 2>&1

export PATH="${PATH}:/usr/java/latest/bin:/usr/java/default/bin"

# 
EMAIL_ADDR="@@NOTIFY_EMAIL@@"

# Sends email to this address if job fails
ERROR_EMAIL_ADDR="@@ERROR_EMAIL@@"

if [ "$EMAIL_ADDR" != "" ] ; then
  
  BCC_EMAIL="@@BCC_EMAIL@@"
  BCC_EMAIL_FLAG=""

  @@ECHO@@ -n "Sending start email for @@JOB_NAME@@ to user $EMAIL_ADDR"
  if [ "$BCC_EMAIL" != "" ] ; then
    @@ECHO@@ " and bcc to $BCC_EMAIL"
    BCC_EMAIL_FLAG="-b $BCC_EMAIL"
  else
    @@ECHO@@ ""
  fi

  OUTEMAIL="Dear @@USER@@,\\n\\n"
  OUTEMAIL="${OUTEMAIL}Your @@WORKFLOW_NAME@@ workflow job: @@JOB_NAME@@ "
  OUTEMAIL="${OUTEMAIL}(@@JOB_ID@@) is now actively running on @@PROJECT@@ resources.\\n"
  OUTEMAIL="${OUTEMAIL}Please login to the @@PORTAL_NAME@@ "
  OUTEMAIL="${OUTEMAIL}(@@PORTAL_URL@@) to check status.\\n\\n"
  OUTEMAIL="${OUTEMAIL}Contact @@PROJECT@@ support at @@HELP_EMAIL@@ if you "
  OUTEMAIL="${OUTEMAIL}have any questions regarding your job.\\n\\n"
  OUTEMAIL="${OUTEMAIL}Sincerely,\\n\\n"
  OUTEMAIL="${OUTEMAIL}The @@PROJECT@@ Team\\n"
  OUTEMAIL="${OUTEMAIL}@@HELP_EMAIL@@\\n"

  @@ECHO@@ -e "${OUTEMAIL}" | @@MAIL@@ -s "@@PROJECT@@ Workflow @@WORKFLOW_NAME@@ - @@JOB_NAME@@ has started running" -r "@@HELP_EMAIL@@" $BCC_EMAIL_FLAG $EMAIL_ADDR
fi

# TODO:  Need to switch from wait to a polling loop so script
#        can check for updates to workflow.status file

@@KEPLER_SH@@ @@JOB_ARGS@@ &

wait $!

declare jobExitCode=$?

#
# If stderr file has size greater then 0 check
# for possible failures cs-244
#
if [ ! -e "$workflowFailedTxt" ] ; then
  if [ -s "stderr" ] ; then

    # Check for Exception in thread "main" Java returned: 1
    grep "Exception in thread \"main\" Java returned: 1" stderr
    if [ $? == 0 ] ; then
      writeWorkflowFailedFile "Error running Kepler" "Found Exception in thread main Java returned: 1 in the stderr file for Kepler"
    fi
  fi
fi

#
# Also check stdout for SQLException if workflowFailedTxt exists
#
if [ ! -e "$workflowFailedTxt" ] ; then
  if [ -s "stdout" ] ; then
    
    # Check for Table already exists exception
    grep "SQLException" stdout
    if [ $? == 0 ] ; then
      writeWorkflowFailedFile "Error running Kepler due to internal database" "SQLException was found in stdout file"
    fi
  fi
fi

if [ "$jobExitCode" == "0" ] ; then
  if [ -s "$workflowFailedTxt" ] ; then
    jobExitCode="101"
  fi
fi

declare endTime=`date +%s 2>&1`
@@ECHO@@ "endtime: $endTime" >> $jobLogFile 2>&1

# 
# Updates the WorkspaceFile Path and whether the workspace file failed
#

declare workspaceStatusFlag="--workspacefilefailed false"

if [ -s "$workflowFailedTxt" ] ; then
  workspaceStatusFlag="--workspacefilefailed true"
fi

#
# cs-287 fix.  If update fails need to retry and if that fails need to
# notify via email and fail the workflow.  The other option is to have
# the workflow generate failed file and just wait for help?
#
let cntr=0
exitCode="-1"
while [ $cntr -lt @@RETRY_COUNT@@ ] ; do
  @@JAVA@@ @@UPDATE_WORKSPACE_PATH@@
  exitCode=$?
  if [ $exitCode == 0 ] ; then
    break
  fi
  let cntr++
  @@ECHO@@ "Update of workspace path try $cntr of @@RETRY_COUNT@@ failed.  Sleeping @@UPDATE_WORKSPACE_RETRY_SLEEP_TIME@@ seconds and retrying"
  @@SLEEP@@ @@UPDATE_WORKSPACE_RETRY_SLEEP_TIME@@
done

if [ $exitCode != 0 ] ; then
  writeWorkflowFailedFile "Unable to update WorkspaceFile" "Received non zero exit code ($exitCode) when trying to update WorkspaceFile"
  jobExitCode="102"
fi

@@ECHO@@ "exitcode: $jobExitCode"  >> $jobLogFile 2>&1


#if the email address was set earlier send the completed workflow message
if [ "$EMAIL_ADDR" != "" ] ; then
  @@ECHO@@ -n "Sending done email for @@JOB_NAME@@ to user $EMAIL_ADDR"
  if [ "$BCC_EMAIL" != "" ] ; then
    @@ECHO@@ " and bcc to $BCC_EMAIL"
  else
    @@ECHO@@ ""
  fi
fi

declare finishedMessage="finished"

OUTEMAIL="Dear @@USER@@,\\n\\n"
OUTEMAIL="${OUTEMAIL}Your @@WORKFLOW_NAME@@ job: @@JOB_NAME@@ (@@JOB_ID@@) "

if [ -s "$workflowFailedTxt" ] ; then
  declare simpleError=`egrep "^simple.error.message=" $workflowFailedTxt | sed "s/^.*=//" | sed "s/\"/ /g"`
  declare detailedError=`egrep "^simple.error.message=" $workflowFailedTxt | sed "s/^.*=//" | sed "s/\"/ /g"`
  finishedMessage="failed"
  OUTEMAIL="${OUTEMAIL}has failed.\\n  Error from ${workflowFailedTxt}: $simpleError\\n\\n$detailedError\\n"
  if [ "$EMAIL_ADDR" == "" ] ; then
    EMAIL_ADDR=$ERROR_EMAIL_ADDR
  else
    if [ "$BCC_EMAIL_FLAG" == "" ] ; then
      if [ "$ERROR_EMAIL_ADDR" != "" ] ; then
        BCC_EMAIL_FLAG="-b $ERROR_EMAIL_ADDR"  
      fi
    else
      if [ "$ERROR_EMAIL_ADDR" != "" ] ; then
        BCC_EMAIL_FLAG="${BCC_EMAIL_FLAG},$ERROR_EMAIL_ADDR"  
      fi
    fi
  fi
else 
  OUTEMAIL="${OUTEMAIL}has finished running.\\n"
fi

OUTEMAIL="${OUTEMAIL}Please login to the @@PORTAL_NAME@@\\n"
OUTEMAIL="${OUTEMAIL}(@@PORTAL_URL@@) to check completion status.\\n\\n"
OUTEMAIL="${OUTEMAIL}Contact @@PROJECT@@ support at @@HELP_EMAIL@@ if you have any questions\\n"
OUTEMAIL="${OUTEMAIL}regarding your job.\\n\\n"
OUTEMAIL="${OUTEMAIL}Sincerely,\\n\\n"
OUTEMAIL="${OUTEMAIL}The @@PROJECT@@ Team\\n"
OUTEMAIL="${OUTEMAIL}@@HELP_EMAIL@@\\n"

if [ "$EMAIL_ADDR" != "" ] ; then
  @@ECHO@@ -e "${OUTEMAIL}" | @@MAIL@@ -s "@@PROJECT@@ Workflow @@WORKFLOW_NAME@@ - @@JOB_NAME@@ has $finishedMessage" -r "@@HELP_EMAIL@@" $BCC_EMAIL_FLAG $EMAIL_ADDR
  @@SLEEP@@ @@POST_EMAIL_SLEEP@@
fi

exit $jobExitCode

