#!/bin/bash
# This script invokes kepler

#
# function called when USR2 signal is caught
#
on_usr2() {
 echo "Caught USR2 signal killing children processes"
 for Y in `ps -o pid,cmd --ppid $$ | grep "java" | grep -v "grep" | sed "s/^ //" | sed "s/ .*//"` ; do
    echo "Killing $Y"
    kill $Y
 done
 echo "endtime: $endTime" >> $jobLogFile 2>&1
 echo "exitcode: 100"  >> $jobLogFile 2>&1
 if [ -s "WORKFLOW.FAILED.txt" ] ; then
   echo " Job received USR2 signal which in SGE" >> WORKFLOW.FAILED.txt
 else
   echo -e "simple.error.message=Job killed by scheduler\\ndetailed.error.message=Job received USR2 signal which in SGE means the job will be killed\\n" > WORKFLOW.FAILED.txt
 fi
 exit 100
}

trap 'on_usr2' USR2


declare jobLogFile="../job.${JOB_ID}.${SGE_TASK_ID}.log"
touch $jobLogFile > /dev/null 2>&1

if [ $? != 0 ] ; then
  jobLogFile="/dev/null"
fi

declare startTime=`date +%s 2>&1`

echo "sgejobid: $JOB_ID" >> $jobLogFile 2>&1
echo "sgejobname: $JOB_NAME" >> $jobLogFile 2>&1
echo "sgetaskid: $SGE_TASK_ID" >> $jobLogFile 2>&1
echo "starttime: $startTime" >> $jobLogFile 2>&1
echo "Arguments: @@JOB_ARGS@@" >> $jobLogFile 2>&1

export PATH="${PATH}:/usr/java/latest/bin:/usr/java/default/bin"

# 
EMAIL_ADDR="@@NOTIFY_EMAIL@@"

if [ "$EMAIL_ADDR" != "" ] ; then
  
  BCC_EMAIL="@@BCC_EMAIL@@"
  BCC_EMAIL_FLAG=""

  echo -n "Sending start email for @@JOB_NAME@@ to user $EMAIL_ADDR"
  if [ "$BCC_EMAIL" != "" ] ; then
    echo " and bcc to $BCC_EMAIL"
    BCC_EMAIL_FLAG="-b $BCC_EMAIL"
  else
    echo ""
  fi

  OUTEMAIL="Dear @@USER@@,\\n\\n"
  OUTEMAIL="${OUTEMAIL}Your job: @@JOB_NAME@@\\n"
  OUTEMAIL="${OUTEMAIL}Id: @@JOB_ID@@\\n"
  OUTEMAIL="${OUTEMAIL}is now actively running on @@PROJECT@@ resources.  Please login to the @@PORTAL_NAME@@\\n"
  OUTEMAIL="${OUTEMAIL}(@@PORTAL_URL@@) to check status.\\n\\n"
  OUTEMAIL="${OUTEMAIL}Contact @@PROJECT@@ support at @@HELP_EMAIL@@ if you have any questions\\n"
  OUTEMAIL="${OUTEMAIL}regarding your job.\\n\\n"
  OUTEMAIL="${OUTEMAIL}Sincerely,\\n\\n"
  OUTEMAIL="${OUTEMAIL}The @@PROJECT@@ Team\\n"
  OUTEMAIL="${OUTEMAIL}@@HELP_EMAIL@@\\n"

  echo -e "${OUTEMAIL}" | /bin/mail -s "@@PROJECT@@ Workflow Notification Email - @@JOB_NAME@@ has started running" -r "@@HELP_EMAIL@@" $BCC_EMAIL_FLAG $EMAIL_ADDR
fi





# 
# Registers the output as WorkspaceFile, but sets path null
#
@@JAVA@@ @@REGISTER_OUTPUT_TO_WORKSPACE@@


# TODO:  Need to run kepler in the background so that code can periodically
#        check for a workflow.status file and if found and different the code
#        can call the REST service with updates.
#        Also code can also listen for kill requests?

@@KEPLER_SH@@ @@JOB_ARGS@@ 

declare jobExitCode=$?
declare endTime=`date +%s 2>&1`

echo "endtime: $endTime" >> $jobLogFile 2>&1
echo "exitcode: $jobExitCode"  >> $jobLogFile 2>&1

# 
# Updates the WorkspaceFile Path
#
@@JAVA@@ @@UPDATE_WORKSPACE_PATH@@


#if the email address was set earlier send the completed workflow message
if [ "$EMAIL_ADDR" != "" ] ; then
  echo -n "Sending done email for @@JOB_NAME@@ to user $EMAIL_ADDR"
  if [ "$BCC_EMAIL" != "" ] ; then
    echo " and bcc to $BCC_EMAIL"
  else
    echo ""
  fi

  OUTEMAIL="Dear @@USER@@,\\n\\n"
  OUTEMAIL="${OUTEMAIL}Your job: @@JOB_NAME@@\\n"
  OUTEMAIL="${OUTEMAIL}Id: @@JOB_ID@@\\n"
  OUTEMAIL="${OUTEMAIL}has finished running.  Please login to the @@PORTAL_NAME@@\\n"
  OUTEMAIL="${OUTEMAIL}(@@PORTAL_URL@@) to check completion status.\\n\\n"
  OUTEMAIL="${OUTEMAIL}Contact @@PROJECT@@ support at @@HELP_EMAIL@@ if you have any questions\\n"
  OUTEMAIL="${OUTEMAIL}regarding your job.\\n\\n"
  OUTEMAIL="${OUTEMAIL}Sincerely,\\n\\n"
  OUTEMAIL="${OUTEMAIL}The @@PROJECT@@ Team\\n"
  OUTEMAIL="${OUTEMAIL}@@HELP_EMAIL@@\\n"

  echo -e "${OUTEMAIL}" | /bin/mail -s "@@PROJECT@@ Workflow Notification Email - @@JOB_NAME@@ has finished" -r "@@HELP_EMAIL@@" $BCC_EMAIL_FLAG $EMAIL_ADDR
  sleep 10
fi



exit $jobExitCode

